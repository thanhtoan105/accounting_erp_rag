<?xml version="1.0" encoding="UTF-8"?>
<databaseChangeLog
        xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog
        http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-4.27.xsd">

    <changeSet id="002-1-create-pii-mask-map-table" author="dev-agent">
        <comment>
            Create pii_mask_map table for storing PII masking mappings.
            Enables reversibility and audit trail for Vietnam Circular 200 compliance.
            Story 1.2: PII Masking and Data Anonymization
        </comment>

        <createTable tableName="pii_mask_map">
            <column name="id" type="UUID" defaultValueComputed="gen_random_uuid()">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="source_table" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="source_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="field" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="masked_value" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="hash" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="salt_version" type="INT">
                <constraints nullable="false"/>
            </column>
            <column name="created_at" type="TIMESTAMPTZ" defaultValueComputed="now()">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addUniqueConstraint
                tableName="pii_mask_map"
                columnNames="source_table, source_id, field"
                constraintName="uq_pii_mask_map_source"/>

        <createIndex indexName="idx_pii_mask_map_source" tableName="pii_mask_map">
            <column name="source_table"/>
            <column name="source_id"/>
        </createIndex>

        <createIndex indexName="idx_pii_mask_map_masked" tableName="pii_mask_map">
            <column name="masked_value"/>
        </createIndex>

        <sql>
            COMMENT ON TABLE pii_mask_map IS 'PII masking mapping table for audit trail and reversibility';
            COMMENT ON COLUMN pii_mask_map.source_table IS 'Source table name (e.g., customers, companies)';
            COMMENT ON COLUMN pii_mask_map.source_id IS 'Source record UUID';
            COMMENT ON COLUMN pii_mask_map.field IS 'Field name (e.g., name, tax_code, email)';
            COMMENT ON COLUMN pii_mask_map.masked_value IS 'Masked value (e.g., Customer_a7f5d)';
            COMMENT ON COLUMN pii_mask_map.hash IS 'Full SHA-256 hash for reversibility';
            COMMENT ON COLUMN pii_mask_map.salt_version IS 'Salt version used for this hash';
        </sql>
    </changeSet>

    <changeSet id="002-2-create-pii-unmask-audit-table" author="dev-agent">
        <comment>
            Create pii_unmask_audit table for logging all PII unmask operations.
            Ensures audit trail for compliance investigations.
            Story 1.2: PII Masking and Data Anonymization
        </comment>

        <createTable tableName="pii_unmask_audit">
            <column name="id" type="UUID" defaultValueComputed="gen_random_uuid()">
                <constraints primaryKey="true" nullable="false"/>
            </column>
            <column name="user_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="entity_id" type="UUID">
                <constraints nullable="false"/>
            </column>
            <column name="justification" type="TEXT">
                <constraints nullable="false"/>
            </column>
            <column name="created_at" type="TIMESTAMPTZ" defaultValueComputed="now()">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <createIndex indexName="idx_pii_unmask_audit_user" tableName="pii_unmask_audit">
            <column name="user_id"/>
        </createIndex>

        <createIndex indexName="idx_pii_unmask_audit_created" tableName="pii_unmask_audit">
            <column name="created_at"/>
        </createIndex>

        <sql>
            COMMENT ON TABLE pii_unmask_audit IS 'Audit log for PII unmask operations (compliance investigations only)';
            COMMENT ON COLUMN pii_unmask_audit.user_id IS 'User who performed unmask operation';
            COMMENT ON COLUMN pii_unmask_audit.entity_id IS 'Entity ID that was unmasked';
            COMMENT ON COLUMN pii_unmask_audit.justification IS 'Justification for unmask operation';
        </sql>
    </changeSet>

    <changeSet id="002-3-create-unmask-pii-function" author="dev-agent">
        <comment>
            Create unmask_pii() PostgreSQL function for reversing PII masking.
            Restricted to service_role only with audit logging.
            Story 1.2: PII Masking and Data Anonymization (Thesis scope: basic demo)
        </comment>

        <sql splitStatements="false"><![CDATA[
            CREATE OR REPLACE FUNCTION unmask_pii(
                p_masked_value TEXT,
                p_company_id UUID DEFAULT NULL,
                p_justification TEXT DEFAULT 'Compliance investigation'
            )
            RETURNS TABLE (
                source_table TEXT,
                source_id UUID,
                field TEXT,
                original_hash TEXT,
                salt_version INT
            )
            LANGUAGE plpgsql
            SECURITY DEFINER
            AS $$
            DECLARE
                v_user_id UUID;
            BEGIN
                -- Get current user ID (requires Supabase auth context)
                -- For thesis demo: use a placeholder user_id
                v_user_id := COALESCE(current_setting('request.jwt.claim.sub', true)::UUID,
                                       '00000000-0000-0000-0000-000000000000'::UUID);

                -- Audit log the unmask attempt
                INSERT INTO pii_unmask_audit (user_id, entity_id, justification)
                VALUES (v_user_id, gen_random_uuid(), p_justification);

                -- Query pii_mask_map for reverse lookup
                RETURN QUERY
                SELECT
                    pmm.source_table,
                    pmm.source_id,
                    pmm.field,
                    pmm.hash AS original_hash,
                    pmm.salt_version
                FROM pii_mask_map pmm
                WHERE pmm.masked_value = p_masked_value
                LIMIT 1;

                -- Note: Full reversibility requires salt retrieval from vault + original value lookup
                -- This function demonstrates mapping table query only (thesis scope)
            END;
            $$;

            COMMENT ON FUNCTION unmask_pii IS 'Reverse lookup of masked PII values with audit logging (basic demo for thesis)';
        ]]></sql>
    </changeSet>

    <changeSet id="002-4-enable-rls-pii-mask-map" author="dev-agent">
        <comment>
            Enable Row Level Security (RLS) on pii_mask_map table.
            Restrict access to ADMIN role only.
            Story 1.2: PII Masking and Data Anonymization
        </comment>

        <sql splitStatements="false"><![CDATA[
            -- Enable RLS
            ALTER TABLE pii_mask_map ENABLE ROW LEVEL SECURITY;
            
            -- Policy: ADMIN role can SELECT and INSERT
            CREATE POLICY pii_mask_map_admin_policy ON pii_mask_map
                FOR ALL
                TO authenticated
                USING (
                    EXISTS (
                        SELECT 1 FROM accounting.user_profiles up
                        WHERE up.user_id = auth.uid()
                        AND up.role = 'ADMIN'
                    )
                );
            
            -- Policy: Service role can SELECT only (for unmask operations)
            CREATE POLICY pii_mask_map_service_policy ON pii_mask_map
                FOR SELECT
                TO service_role
                USING (true);
            
            COMMENT ON POLICY pii_mask_map_admin_policy ON pii_mask_map IS 'ADMIN role: full access to PII mask mappings';
            COMMENT ON POLICY pii_mask_map_service_policy ON pii_mask_map IS 'Service role: read-only access for unmask operations';
        ]]></sql>
    </changeSet>

</databaseChangeLog>
